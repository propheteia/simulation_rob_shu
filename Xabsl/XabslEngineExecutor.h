/***************************************************************************
 *   Copyright (C) 2008 by Zhu_Ming,Zheng Yonglei  Qu Junjun *
 *   zhuming535984@gmail.com,zhengyonglei@gmail.com   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#ifndef XABSLENGINEEXECUTOR_H
#define XABSLENGINEEXECUTOR_H

#include "XabslEngine.h"
#include "SolutionRequest.h"
#include <fstream>

using namespace xabsl;


/** Implements Xabsl2ErrorHandler using the OUTPUT macro */
class MyXabslErrorHandler : public ErrorHandler
{
public:
/** 
* Constructor 
* @param id The id of the Xabsl2Engine. 
  */
  MyXabslErrorHandler(SolutionRequest::xabslEngineID id);
  
  /** 
  * Prints out an error
  * @param text The text to display
  */
  virtual void printError(const char* text);
  
  /**
  * Prints out a message
  * @param text The text to display
  */
  virtual void printMessage(const char* text);
  
private:
  /** The id of the Xabsl2Engine. */
  SolutionRequest::xabslEngineID id;
};

class MyXabslFileInputSource : public InputSource, public NamedItem
{
public:
/** 
* Constructor. Does not open the file
* @param fileName The file name to open
  */
  MyXabslFileInputSource(const char* fileName);
  
  /** Destructor */
  ~MyXabslFileInputSource();
  
  /** opens the source that contains the intermediate code */
  virtual bool open();
  
  /** closes the source */
  virtual void close();
  
  /** reads a numeric value from the input source */
  virtual double readValue();
  
  /** 
  * reads a string from the input source
  * @param destination The position where to write the string
  * @param maxLength the maximum length of the string
  * @return if the read succeded
  */
  virtual bool readString(char* destination, int maxLength);
  
private:
  	char filename[200]; // the file name
  	std::ifstream* file; // the file to access
  	char theChar; // the last character read
	void readFromFile(char* value);
	bool isWhitespace();
};


class XabslEngineExecutor 
{
public:
/** 
* Constructor.
* @param id The id of the Xabsl2Engine derivate.
* @param module The id of the module (not the solution) that embeds the engine
* @param frameNumber A reference to a variable containing the current frame number
  */
  	XabslEngineExecutor(SolutionRequest::xabslEngineID id,SolutionRequest::ModuleID module,
                             const int& frameNumber);
  
  	/** destructor */
  	~XabslEngineExecutor();
  
  	/** 
  	* Creates a new engine 
  	* @param input An input source to read to intermediate code from
  	*/
  	void init(InputSource& input);
  
  	/** Executes the engine */
  	void executeEngine();
  
  	/** Registers symbols and basic behaviors at the engine */
  	virtual void registerSymbolsAndBasicBehaviors() = 0;
  
  	/** Sets the selected Agent. If the last selected agent was different from
  	* the new one, the root option is changed depending on the new agent.
  	* @param name The name of the agent
  	*/
  	void setSelectedAgent(const char* name);
  
protected:
  
  	/** An engine that executes the XML formalized behaviors */
  	Engine* pEngine;
  
  	/** Is invoked when errors occur */
  	MyXabslErrorHandler errorHandler;
  
  	/** Is called if the engine could not be created */
  	virtual void executeIfEngineCouldNotBeCreated() = 0;

  	/** 
  	* Prints the main action that was generated by the execution of the engine to a string
  	* @param buf the string where to print the action
  	*/
  	virtual void printGeneratedMainActionToString(char* buf) = 0;


private:
  
  /** The id of the Xabsl2Engine derivate. */
  SolutionRequest::xabslEngineID id;
  
  /** The id of the module (not the solution) that embeds the engine */
  SolutionRequest::ModuleID module;

};

#endif